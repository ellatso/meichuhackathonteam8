<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>高密度交通流量 GLIDE 模擬系統</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            padding: 30px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 20px;
        }
        
        .header h1 {
            color: #1e293b;
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .header p {
            color: #64748b;
            font-size: 1.1rem;
        }
        
        .control-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
            padding: 20px;
            background: #f8fafc;
            border-radius: 8px;
        }
        
        .control-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }
        
        .control-group label {
            font-weight: 600;
            color: #374151;
            font-size: 0.9rem;
        }
        
        .control-group input, .control-group select {
            padding: 10px;
            border: 2px solid #e2e8f0;
            border-radius: 6px;
            font-size: 1rem;
            transition: border-color 0.2s;
        }
        
        .control-group input:focus, .control-group select:focus {
            outline: none;
            border-color: #3b82f6;
        }
        
        .simulation-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: center;
            margin-bottom: 30px;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 120px;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
        }
        
        .btn-success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }
        
        .btn-warning {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            color: white;
        }
        
        .btn-info {
            background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
            color: white;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .simulation-area {
            margin-bottom: 30px;
        }
        
        #canvas {
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            background: #f8fafc;
            width: 100%;
            max-width: 1200px;
            height: auto;
            display: block;
            margin: 0 auto;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .playback-controls {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            margin: 20px 0;
            padding: 20px;
            background: #f1f5f9;
            border-radius: 8px;
        }
        
        .speed-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .speed-control label {
            font-weight: 600;
            color: #374151;
        }
        
        .speed-control select {
            padding: 8px 12px;
            border: 2px solid #e2e8f0;
            border-radius: 6px;
            background: white;
        }
        
        #frameInfo {
            font-weight: 600;
            color: #1e293b;
            font-size: 1.1rem;
        }
        
        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }
        
        .result-card {
            background: white;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }
        
        .result-card h3 {
            color: #1e293b;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f1f5f9;
        }
        
        .kpi-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
        }
        
        .kpi-item {
            text-align: center;
            padding: 15px;
            background: #f8fafc;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }
        
        .kpi-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1e293b;
            margin-bottom: 5px;
        }
        
        .kpi-label {
            font-size: 0.85rem;
            color: #64748b;
            font-weight: 500;
        }
        
        .legend {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: center;
            margin: 20px 0;
            padding: 15px;
            background: #f8fafc;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9rem;
            color: #374151;
        }
        
        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 4px;
            border: 1px solid #000;
        }
        
        .event-item {
            padding: 12px;
            margin: 8px 0;
            border-radius: 8px;
            font-size: 0.9rem;
            border-left: 4px solid;
        }
        
        .event-extend {
            background: #dcfce7;
            border-left-color: #22c55e;
        }
        
        .event-hold {
            background: #fef3c7;
            border-left-color: #eab308;
        }
        
        .event-tsp {
            background: #dbeafe;
            border-left-color: #3b82f6;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .control-panel {
                grid-template-columns: 1fr;
            }
            
            .simulation-buttons {
                flex-direction: column;
                align-items: center;
            }
            
            .playback-controls {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚦 高密度交通流量 GLIDE 模擬系統</h1>
            <p>智能交通信號控制與公車優先系統 - 多路口大型模擬</p>
        </div>
        
        <div class="control-panel">
            <div class="control-group">
                <label for="cycle">時制週期 (秒)</label>
                <input type="number" id="cycle" value="90" min="60" max="180" step="10">
            </div>
            <div class="control-group">
                <label for="speed">巡航速度 (km/h)</label>
                <input type="number" id="speed" value="50" min="30" max="70" step="5">
            </div>
            <div class="control-group">
                <label for="steps">模擬時長 (步)</label>
                <input type="number" id="steps" value="300" min="180" max="600" step="30">
            </div>
            <div class="control-group">
                <label for="busFlow">公車班距 (秒)</label>
                <input type="number" id="busFlow" value="120" min="60" max="300" step="30">
            </div>
        </div>
        
        <div class="simulation-buttons">
            <button class="btn btn-primary" onclick="runSimulation('fixed')" id="btn-fixed">
                🔒 固定時制模式
            </button>
            <button class="btn btn-success" onclick="runSimulation('glide')" id="btn-glide">
                🌊 GLIDE 綠波模式
            </button>
            <button class="btn btn-warning" onclick="runSimulation('glide_tsp')" id="btn-tsp">
                🚌 GLIDE + TSP 模式
            </button>
            <button class="btn btn-info" onclick="runDemoSequence()" id="btn-demo">
                🎬 自動展示序列
            </button>
        </div>
        
        <div class="legend">
            <div class="legend-item">
                <div class="legend-color" style="background: #3b82f6;"></div>
                <span>普通車輛</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #f97316;"></div>
                <span>公車</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #22c55e;"></div>
                <span>綠燈</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #eab308;"></div>
                <span>黃燈</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #ef4444;"></div>
                <span>紅燈</span>
            </div>
            <div class="legend-item">
                <div class="legend-color" style="background: #3b82f6; border: 2px solid #ef4444;"></div>
                <span>公車站</span>
            </div>
        </div>
        
        <div class="simulation-area">
            <canvas id="canvas" width="1200" height="400"></canvas>
        </div>
        
        <div class="playback-controls">
            <div class="speed-control">
                <label>播放速度:</label>
                <select id="playSpeed" onchange="updatePlaySpeed()">
                    <option value="1000">1x (慢速)</option>
                    <option value="500">2x (正常)</option>
                    <option value="300" selected>3x (快速)</option>
                    <option value="150">6x (很快)</option>
                    <option value="100">10x (極快)</option>
                </select>
            </div>
            <span id="frameInfo">等待模擬數據...</span>
            <button class="btn btn-primary" onclick="togglePlayback()" id="playBtn" disabled>▶ 播放</button>
            <button class="btn" onclick="resetPlayback()" id="resetBtn" disabled>⏹ 重置</button>
        </div>
        
        <div class="results-grid">
            <div class="result-card" id="kpiCard" style="display: none;">
                <h3>📊 性能指標 (KPI)</h3>
                <div class="kpi-grid" id="kpiResult"></div>
            </div>
            
            <div class="result-card" id="eventsCard" style="display: none;">
                <h3>🚨 系統事件</h3>
                <div id="eventsResult"></div>
            </div>
        </div>
    </div>

    <script>
        const API_BASE = 'http://localhost:8000';
        
        let currentSimulation = null;
        let currentFrames = [];
        let currentFrame = 0;
        let isPlaying = false;
        let animationInterval = null;
        let currentPlaySpeed = 300;
        
        // 增強版模擬運行函數
        async function runSimulation(mode) {
            const buttons = ['btn-fixed', 'btn-glide', 'btn-tsp', 'btn-demo'];
            buttons.forEach(id => document.getElementById(id).disabled = true);
            
            try {
                const cycle = parseInt(document.getElementById('cycle').value);
                const speed = parseFloat(document.getElementById('speed').value);
                const steps = parseInt(document.getElementById('steps').value);
                const busFlow = parseInt(document.getElementById('busFlow').value);
                
                document.getElementById('frameInfo').textContent = '正在運行模擬...';
                
                const response = await fetch(`${API_BASE}/glide/sim`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        mode, 
                        cycle, 
                        v_prog_kmh: speed, 
                        steps,
                        bus_headway: busFlow
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('Simulation response:', data);
                
                currentSimulation = data;
                currentFrames = data.frames || [];
                currentFrame = 0;
                
                // 顯示 KPI
                if (data.kpis) {
                    displayKPIs(data.kpis);
                }
                
                // 顯示事件
                if (data.events && Array.isArray(data.events) && data.events.length > 0) {
                    displayEvents(data.events);
                } else {
                    document.getElementById('eventsCard').style.display = 'none';
                }
                
                // 準備動畫
                if (currentFrames.length > 0) {
                    document.getElementById('frameInfo').textContent = `1 / ${currentFrames.length} 幀`;
                    document.getElementById('playBtn').disabled = false;
                    document.getElementById('resetBtn').disabled = false;
                    drawFrame(currentFrames[0]);
                } else {
                    document.getElementById('frameInfo').textContent = '無動畫數據';
                }
                
            } catch (error) {
                console.error('Simulation error:', error);
                alert('模擬失敗: ' + error.message);
                document.getElementById('frameInfo').textContent = '模擬失敗';
            } finally {
                buttons.forEach(id => document.getElementById(id).disabled = false);
            }
        }
        
        // 顯示 KPI
        function displayKPIs(kpis) {
            document.getElementById('kpiCard').style.display = 'block';
            
            const kpiResult = document.getElementById('kpiResult');
            kpiResult.innerHTML = `
                <div class="kpi-item">
                    <div class="kpi-value">${(kpis.progression_rate * 100).toFixed(1)}%</div>
                    <div class="kpi-label">進帶率</div>
                </div>
                <div class="kpi-item">
                    <div class="kpi-value">${kpis.avg_stops_main.toFixed(1)}</div>
                    <div class="kpi-label">平均停等次數</div>
                </div>
                <div class="kpi-item">
                    <div class="kpi-value">${kpis.avg_delay_main.toFixed(1)}s</div>
                    <div class="kpi-label">平均延誤</div>
                </div>
                <div class="kpi-item">
                    <div class="kpi-value">${kpis.mode}</div>
                    <div class="kpi-label">控制模式</div>
                </div>
                <div class="kpi-item">
                    <div class="kpi-value">${kpis.total_vehicles || 'N/A'}</div>
                    <div class="kpi-label">總車輛數</div>
                </div>
                <div class="kpi-item">
                    <div class="kpi-value">${kpis.bus_regularity?.toFixed(2) || 'N/A'}</div>
                    <div class="kpi-label">公車規律性</div>
                </div>
            `;
        }
        
        // 顯示事件
        function displayEvents(events) {
            if (!events || !Array.isArray(events)) {
                console.log('No events to display');
                return;
            }
            
            document.getElementById('eventsCard').style.display = 'block';
            const eventsToShow = events.slice(-15); // 顯示最後 15 個事件
            
            if (eventsToShow.length === 0) {
                document.getElementById('eventsResult').innerHTML = 
                    '<div style="color: #64748b; text-align: center; padding: 20px;">尚無系統事件</div>';
                return;
            }
            
            document.getElementById('eventsResult').innerHTML = eventsToShow.map(event => {
                let eventClass = 'event-item';
                let icon = '📝';
                
                if (event.type === 'TSP_EXTEND') {
                    eventClass += ' event-extend';
                    icon = '🟢';
                } else if (event.type === 'BUS_HOLD') {
                    eventClass += ' event-hold'; 
                    icon = '🟡';
                } else if (event.type.includes('TSP')) {
                    eventClass += ' event-tsp';
                    icon = '🚌';
                }
                
                return `
                    <div class="${eventClass}">
                        <strong>${icon} ${event.type === 'TSP_EXTEND' ? '延綠' : 
                                       event.type === 'BUS_HOLD' ? '公車保留' : event.type}</strong>
                        @ ${event.node || event.location || '系統'}
                        <div style="font-size: 0.85rem; margin-top: 4px; opacity: 0.8;">
                            ${event.reason || event.description || ''} 
                            (t=${event.t}s, 持續${event.sec || event.duration || 0}s)
                        </div>
                    </div>
                `;
            }).join('');
        }
        
        // 增強版繪圖函數
        function drawFrame(frame) {
            const canvas = document.getElementById('canvas');
            const ctx = canvas.getContext('2d');
            
            // 清空畫布
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            drawRoadNetwork(ctx);
            drawIntersections(ctx, frame.signals);
            drawBusStops(ctx);
            drawVehicles(ctx, frame.vehicles);
            drawTrafficInfo(ctx, frame);
        }
        
        function drawRoadNetwork(ctx) {
            // 主幹道 (水平)
            ctx.fillStyle = '#374151';
            ctx.fillRect(50, 180, 1100, 40);
            
            // 車道線
            ctx.strokeStyle = '#ffffff';
            ctx.lineWidth = 2;
            ctx.setLineDash([15, 15]);
            
            // 畫三條車道線
            for (let i = 1; i <= 2; i++) {
                ctx.beginPath();
                ctx.moveTo(50, 180 + i * 13);
                ctx.lineTo(1150, 180 + i * 13);
                ctx.stroke();
            }
            
            // 垂直道路 (南北向)
            const intersections = [300, 600, 900];
            intersections.forEach(x => {
                ctx.fillRect(x - 20, 100, 40, 200);
                
                // 垂直車道線
                ctx.beginPath();
                ctx.moveTo(x - 7, 100);
                ctx.lineTo(x - 7, 300);
                ctx.moveTo(x + 7, 100);
                ctx.lineTo(x + 7, 300);
                ctx.stroke();
            });
            
            ctx.setLineDash([]);
        }
        
        function drawIntersections(ctx, signals) {
            const intersections = [
                { x: 300, id: 'J1', name: '建國路口' },
                { x: 600, id: 'J2', name: '中正路口' }, 
                { x: 900, id: 'J3', name: '民族路口' }
            ];
            
            intersections.forEach(intersection => {
                const signal = signals?.find(s => s.node === intersection.id);
                if (!signal) return;
                
                // 路口區域
                ctx.fillStyle = '#4b5563';
                ctx.fillRect(intersection.x - 25, 175, 50, 50);
                
                // 信號燈柱 (四個方向)
                const directions = [
                    { x: intersection.x, y: 160, label: '北' },
                    { x: intersection.x, y: 240, label: '南' },
                    { x: intersection.x - 40, y: 200, label: '西' },
                    { x: intersection.x + 40, y: 200, label: '東' }
                ];
                
                directions.forEach(dir => {
                    // 信號燈背景
                    ctx.fillStyle = '#1f2937';
                    ctx.fillRect(dir.x - 8, dir.y - 25, 16, 50);
                    
                    // 信號燈
                    const colors = {
                        'G': '#22c55e', 'g': '#22c55e',
                        'y': '#eab308', 'Y': '#eab308', 
                        'r': '#ef4444'
                    };
                    
                    ctx.fillStyle = colors[signal.state] || '#ef4444';
                    ctx.beginPath();
                    ctx.arc(dir.x, dir.y - 10, 8, 0, 2 * Math.PI);
                    ctx.fill();
                    
                    // 發光效果
                    ctx.shadowColor = colors[signal.state] || '#ef4444';
                    ctx.shadowBlur = 10;
                    ctx.fill();
                    ctx.shadowBlur = 0;
                });
                
                // 路口標籤
                ctx.fillStyle = '#000';
                ctx.font = 'bold 12px Arial';
                ctx.textAlign = 'center';
                ctx.fillText(intersection.name, intersection.x, 135);
                ctx.fillText(intersection.id, intersection.x, 150);
            });
        }
        
        function drawBusStops(ctx) {
            const busStops = [
                { x: 450, name: '科學園區站', id: 'S1' },
                { x: 750, name: '高鐵新竹站', id: 'S2' }
            ];
            
            busStops.forEach(stop => {
                // 公車站台
                ctx.fillStyle = '#3b82f6';
                ctx.fillRect(stop.x - 30, 140, 60, 20);
                
                // 站台標示
                ctx.fillStyle = '#ffffff';
                ctx.font = 'bold 10px Arial';
                ctx.textAlign = 'center';
                ctx.fillText('BUS STOP', stop.x, 152);
                
                // 站名
                ctx.fillStyle = '#000';
                ctx.font = '11px Arial';
                ctx.fillText(stop.name, stop.x, 135);
                
                // 等候區域
                ctx.strokeStyle = '#3b82f6';
                ctx.lineWidth = 2;
                ctx.strokeRect(stop.x - 35, 160, 70, 15);
            });
        }
        
        function drawVehicles(ctx, vehicles) {
            if (!vehicles || vehicles.length === 0) return;
            
            vehicles.forEach(vehicle => {
                // 座標映射：SUMO [-500, 500] -> Canvas [100, 1100]
                const canvasX = 100 + (vehicle.x + 500) * 1000 / 1000;
                const canvasY = 200 + (vehicle.y || 0);
                
                if (canvasX < 50 || canvasX > 1150) return;
                
                // 車輛尺寸和顏色
                const isBus = vehicle.kind === 'bus';
                const width = isBus ? 24 : 14;
                const height = isBus ? 10 : 8;
                const color = isBus ? '#f97316' : '#3b82f6';
                
                // 車輛陰影
                ctx.fillStyle = 'rgba(0,0,0,0.3)';
                ctx.fillRect(canvasX - width/2 + 2, canvasY - height/2 + 2, width, height);
                
                // 車輛主體
                ctx.fillStyle = color;
                ctx.fillRect(canvasX - width/2, canvasY - height/2, width, height);
                
                // 停車狀態指示
                if (vehicle.stopped) {
                    ctx.strokeStyle = '#ef4444';
                    ctx.lineWidth = 2;
                    ctx.strokeRect(canvasX - width/2 - 1, canvasY - height/2 - 1, width + 2, height + 2);
                }
                
                // 公車在站停車指示
                if (vehicle.stopped_at_station) {
                    ctx.fillStyle = '#10b981';
                    ctx.beginPath();
                    ctx.arc(canvasX, canvasY - 15, 5, 0, 2 * Math.PI);
                    ctx.fill();
                    
                    ctx.fillStyle = '#fff';
                    ctx.font = 'bold 8px Arial';
                    ctx.textAlign = 'center';
                    ctx.fillText('STOP', canvasX, canvasY - 13);
                }
                
                // 車輛標示
                if (isBus) {
                    ctx.fillStyle = '#ffffff';
                    ctx.font = 'bold 7px Arial';
                    ctx.textAlign = 'center';
                    ctx.fillText('BUS', canvasX, canvasY + 1);
                }
            });
        }
        
        function drawTrafficInfo(ctx, frame) {
            // 顯示詳細統計
            ctx.fillStyle = '#000';
            ctx.font = '14px Arial';
            ctx.textAlign = 'left';
            
            const cars = frame.vehicles?.filter(v => v.kind === 'car').length || 0;
            const buses = frame.vehicles?.filter(v => v.kind === 'bus').length || 0;
            const stopped = frame.vehicles?.filter(v => v.stopped).length || 0;
            
            ctx.fillText(`⏰ 時間: ${frame.t}s | 🚗 車輛: ${cars} 汽車, ${buses} 公車 | 🛑 停車: ${stopped} 台`, 60, 30);
            
            // 即時 KPI
            if (currentSimulation?.kpis) {
                const kpis = currentSimulation.kpis;
                ctx.fillText(`🎯 ${kpis.mode} 模式 | 📈 進帶率: ${(kpis.progression_rate * 100).toFixed(1)}% | ⏱️ 平均停等: ${kpis.avg_stops_main}`, 60, 50);
            }
        }
        
        // 播放控制
        function togglePlayback() {
            if (!currentFrames || currentFrames.length === 0) {
                alert('沒有可播放的動畫數據');
                return;
            }
            
            const btn = document.getElementById('playBtn');
            if (isPlaying) {
                clearInterval(animationInterval);
                isPlaying = false;
                btn.textContent = '▶ 播放';
            } else {
                isPlaying = true;
                btn.textContent = '⏸ 暫停';
                animationInterval = setInterval(() => {
                    if (currentFrame >= currentFrames.length - 1) {
                        togglePlayback();
                        return;
                    }
                    currentFrame++;
                    drawFrame(currentFrames[currentFrame]);
                    document.getElementById('frameInfo').textContent = `${currentFrame + 1} / ${currentFrames.length} 幀`;
                }, currentPlaySpeed);
            }
        }
        
        function resetPlayback() {
            if (!currentFrames || currentFrames.length === 0) return;
            
            clearInterval(animationInterval);
            isPlaying = false;
            currentFrame = 0;
            document.getElementById('playBtn').textContent = '▶ 播放';
            drawFrame(currentFrames[0]);
            document.getElementById('frameInfo').textContent = `1 / ${currentFrames.length} 幀`;
        }
        
        function updatePlaySpeed() {
            currentPlaySpeed = parseInt(document.getElementById('playSpeed').value);
            
            if (isPlaying) {
                clearInterval(animationInterval);
                animationInterval = setInterval(() => {
                    if (currentFrame >= currentFrames.length - 1) {
                        togglePlayback();
                        return;
                    }
                    currentFrame++;
                    drawFrame(currentFrames[currentFrame]);
                    document.getElementById('frameInfo').textContent = `${currentFrame + 1} / ${currentFrames.length} 幀`;
                }, currentPlaySpeed);
            }
        }
        
        // 自動展示序列
        async function runDemoSequence() {
            const modes = [
                { mode: 'fixed', name: '固定時制' },
                { mode: 'glide', name: 'GLIDE 綠波' },
                { mode: 'glide_tsp', name: 'GLIDE + TSP' }
            ];
            
            document.getElementById('btn-demo').disabled = true;
            document.getElementById('btn-demo').textContent = '🎬 展示中...';
            
            for (let i = 0; i < modes.length; i++) {
                console.log(`Running demo ${i + 1}/${modes.length}: ${modes[i].name}`);
                await runSimulation(modes[i].mode);
                
                if (i < modes.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 3000));
                }
            }
            
            document.getElementById('btn-demo').disabled = false;
            document.getElementById('btn-demo').textContent = '🎬 自動展示序列';
            alert('🎉 展示序列完成！您可以看到三種模式的效果對比。');
        }
        
        // 初始化
        document.addEventListener('DOMContentLoaded', function() {
            console.log('高密度交通模擬系統已加載');
            drawFrame({
                t: 0,
                signals: [
                    { node: 'J1', state: 'r' },
                    { node: 'J2', state: 'r' },
                    { node: 'J3', state: 'r' }
                ],
                vehicles: []
            });
        });
    </script>
</body>
</html>