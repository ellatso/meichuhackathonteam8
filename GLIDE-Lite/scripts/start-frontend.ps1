# GLIDE-Lite 前端啟動腳本
# 適用於 Windows 10/11 + VSCode PowerShell

param(
    [switch]$Clean,
    [switch]$NoDeps,
    [int]$Port = 5173,
    [string]$ApiUrl = "http://127.0.0.1:8001"
)

Write-Host "=== GLIDE-Lite Frontend Startup ===" -ForegroundColor Green

# 變更到前端目錄
$FrontendDir = Join-Path $PSScriptRoot "..\frontend"
if (-not (Test-Path $FrontendDir)) {
    Write-Error "Frontend directory not found: $FrontendDir"
    exit 1
}

Set-Location $FrontendDir
Write-Host "Working directory: $(Get-Location)" -ForegroundColor Yellow

# 檢查 Node.js
try {
    $NodeVersion = node --version 2>&1
    Write-Host "✓ Node.js found: $NodeVersion" -ForegroundColor Green
    
    # 檢查 Node.js 版本 (需要 18+)
    $NodeVersionNumber = $NodeVersion -replace 'v', '' -replace '\.\d+\.\d+$', ''
    if ([int]$NodeVersionNumber -lt 18) {
        Write-Warning "Node.js version $NodeVersion detected. Version 18+ recommended."
    }
} catch {
    Write-Error "Node.js not found. Please install Node.js 18+ from https://nodejs.org/"
    exit 1
}

# 檢查 npm
try {
    $NpmVersion = npm --version 2>&1
    Write-Host "✓ npm found: $NpmVersion" -ForegroundColor Green
} catch {
    Write-Error "npm not found. Please install npm or use Node.js installer."
    exit 1
}

# 清理 node_modules (如果指定)
if ($Clean) {
    Write-Host "Cleaning node_modules and package-lock.json..." -ForegroundColor Yellow
    
    if (Test-Path "node_modules") {
        Remove-Item "node_modules" -Recurse -Force
        Write-Host "✓ node_modules removed" -ForegroundColor Green
    }
    
    if (Test-Path "package-lock.json") {
        Remove-Item "package-lock.json" -Force
        Write-Host "✓ package-lock.json removed" -ForegroundColor Green
    }
    
    if (Test-Path ".vite") {
        Remove-Item ".vite" -Recurse -Force
        Write-Host "✓ .vite cache removed" -ForegroundColor Green
    }
}

# 檢查 package.json
if (-not (Test-Path "package.json")) {
    Write-Warning "package.json not found. Creating minimal configuration..."
    
    $PackageJson = @"
{
  "name": "glide-lite-frontend",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "axios": "^1.6.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.0.0",
    "vite": "^5.0.0",
    "tailwindcss": "^3.3.0",
    "autoprefixer": "^10.4.0",
    "postcss": "^8.4.0"
  }
}
"@
    $PackageJson | Out-File -FilePath "package.json" -Encoding UTF8
}

# 安裝依賴 (除非指定 -NoDeps)
if (-not $NoDeps) {
    Write-Host "Installing dependencies..." -ForegroundColor Yellow
    
    # 清理 npm 快取 (如果需要)
    if ($Clean) {
        npm cache clean --force
    }
    
    # 安裝依賴
    npm install
    if ($LASTEXITCODE -ne 0) {
        Write-Warning "npm install failed, attempting with --legacy-peer-deps..."
        npm install --legacy-peer-deps
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install dependencies"
            exit 1
        }
    }
    
    Write-Host "✓ Dependencies installed successfully" -ForegroundColor Green
}

# 檢查重要的依賴
$RequiredDeps = @("react", "react-dom", "vite", "axios", "tailwindcss")
$PackageJsonContent = Get-Content "package.json" | ConvertFrom-Json

Write-Host "`n=== Dependencies Check ===" -ForegroundColor Cyan
foreach ($dep in $RequiredDeps) {
    $DepVersion = $PackageJsonContent.dependencies.$dep -or $PackageJsonContent.devDependencies.$dep
    if ($DepVersion) {
        Write-Host "✓ $dep ($DepVersion)" -ForegroundColor Green
    } else {
        Write-Warning "✗ $dep not found in package.json"
    }
}

# 設定環境變數
$EnvFile = ".env.local"
Write-Host "`n=== Environment Configuration ===" -ForegroundColor Cyan

# 創建或更新 .env.local
$EnvContent = @"
# GLIDE-Lite Frontend Environment Variables
# Generated by start-frontend.ps1

# API Base URL
VITE_API_URL=$ApiUrl

# Development settings
VITE_NODE_ENV=development
VITE_DEBUG=true

# Optional: Feature flags
VITE_ENABLE_DEMO_MODE=true
VITE_ENABLE_ADVANCED_TSP=true

# Build settings
VITE_BASE_PATH=/
"@

$EnvContent | Out-File -FilePath $EnvFile -Encoding UTF8
Write-Host "✓ Environment file updated: $EnvFile" -ForegroundColor Green
Write-Host "  API URL: $ApiUrl" -ForegroundColor Yellow

# 檢查重要檔案
Write-Host "`n=== Source Files Check ===" -ForegroundColor Cyan

$RequiredFiles = @(
    "src/pages/Glide.jsx",
    "src/components/CorridorCanvas.jsx",
    "index.html",
    "vite.config.js"
)

foreach ($file in $RequiredFiles) {
    if (Test-Path $file) {
        Write-Host "✓ $file" -ForegroundColor Green
    } else {
        Write-Warning "✗ $file missing"
    }
}

# 創建缺失的配置檔案
if (-not (Test-Path "vite.config.js")) {
    Write-Host "Creating vite.config.js..." -ForegroundColor Yellow
    
    $ViteConfig = @"
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: $Port,
    open: true,
    cors: true
  },
  build: {
    outDir: 'dist',
    sourcemap: true
  },
  define: {
    global: 'globalThis'
  }
})
"@
    $ViteConfig | Out-File -FilePath "vite.config.js" -Encoding UTF8
}

if (-not (Test-Path "tailwind.config.js")) {
    Write-Host "Creating tailwind.config.js..." -ForegroundColor Yellow
    
    $TailwindConfig = @"
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
"@
    $TailwindConfig | Out-File -FilePath "tailwind.config.js" -Encoding UTF8
}

# 檢查端口可用性
Write-Host "`n=== Port Availability Check ===" -ForegroundColor Cyan
try {
    $PortCheck = Get-NetTCPConnection -LocalPort $Port -ErrorAction SilentlyContinue
    if ($PortCheck) {
        Write-Warning "Port $Port is already in use"
        Write-Host "Vite will try to use next available port" -ForegroundColor Yellow
    } else {
        Write-Host "✓ Port $Port is available" -ForegroundColor Green
    }
} catch {
    Write-Host "Port check inconclusive, proceeding..." -ForegroundColor Yellow
}

# 測試 API 連接
Write-Host "`n=== API Connection Test ===" -ForegroundColor Cyan
try {
    $Response = Invoke-RestMethod -Uri "$ApiUrl/health" -Method Get -TimeoutSec 5 -ErrorAction Stop
    Write-Host "✓ API connection successful" -ForegroundColor Green
    Write-Host "  API Status: $($Response.status)" -ForegroundColor Yellow
} catch {
    Write-Warning "API connection failed: $($_.Exception.Message)"
    Write-Host "Make sure backend is running: .\scripts\start-backend.ps1" -ForegroundColor Yellow
}

# 啟動開發服務器
Write-Host "`n=== Starting Vite Development Server ===" -ForegroundColor Green
Write-Host "Server will start on: http://localhost:$Port" -ForegroundColor Yellow
Write-Host "Browser should open automatically" -ForegroundColor Yellow
Write-Host "Press Ctrl+C to stop the server" -ForegroundColor Yellow
Write-Host ""

# 啟動 Vite
try {
    npm run dev
} catch {
    Write-Error "Failed to start Vite development server: $_"
    
    # 提供故障排除建議
    Write-Host "`n=== Troubleshooting Tips ===" -ForegroundColor Red
    Write-Host "1. Check if Node.js 18+ is installed"
    Write-Host "2. Clear npm cache: npm cache clean --force"
    Write-Host "3. Delete node_modules and reinstall: rm -rf node_modules && npm install"
    Write-Host "4. Check if port $Port is available"
    Write-Host "5. Verify all required files exist in src/ directory"
    Write-Host "6. Try running with -Clean flag to reset everything"
    
    exit 1
}

# 清理 (這段通常不會執行，因為 Vite 會持續運行)
Write-Host "`nShutting down..." -ForegroundColor Yellow